{
  /* 项目选项,用于配置项目的运行时期望、转译 JavaScript 的输出方式和位置。 */
  "compilerOptions":{
    /* 项目相关 */
    "incremental": true,                              /* 增量编译，允许将编译结果保存到磁盘上的 .tsbuildinfo 文件中，以优化后续的编译速度 */
    "composite": true,                                /* 组合项目，允许将多个项目组合成一个项目，以优化编译速度 */
    "tsBuildInfoFile": "./",                          /* 指定 .tsbuildinfo 文件的输出目录 */
    "disableSourceOfProjectReferenceRedirect": true,  /* 禁用项目引用的源文件重定向 */
    "disableSolutionSearching": true,                 /* 禁用解决方案搜索 */
    "disableReferencedProjectLoad": true,             /* 禁用引用的项目加载 */

    /* 语言和环境 */
    "target": "esnext",                               /* 编译目标，可选值：es3、es5、es6、es2015、es2016、es2017、es2018、es2019、es2020、esnext */
    "lib": ["dom", "dom.iterable", "esnext"],         /* 编译时需要引入的库文件 */
    /*安装 TypeScript 时会顺带安装一个 lib.d.ts 声明文件，并且默认包含了 ES5、DOM、WebWorker、ScriptHost 的库定义。*/
    /*lib 配置项允许我们更细粒度地控制代码运行时的库定义文件，比如说 Node.js 程序，由于并不依赖浏览器环境，因此不需要包含 DOM 类型定义；而如果需要使用一些最新的、高级 ES 特性，则需要包含 ESNext 类型。*/

    "jsx": "preserve",                                /* 控制 JSX 转译 JavaScript 文件的输出方式，可选值：react、react-jsx、react-jsxdev、react-native、preserve */
    /*react: 将 jsx 改为等价的对 React.createElement 的调用，并生成 .js 文件。
    react-jsx: 改为 __jsx 调用，并生成 .js 文件。
    react-jsxdev: 改为 __jsx 调用，并生成 .js 文件。
    preserve: 不对 jsx 进行改变，并生成 .jsx 文件。
    react-native: 不对 jsx 进行改变，并生成 .js 文件。*/

    "experimentalDecorators": true,                   /* 启用实验性的装饰器语法 */
    "emitDecoratorMetadata": true,                    /* 启用装饰器元数据,选项允许装饰器使用反射数据的特性。*/
    "jsxFactory": "React.createElement",              /* 指定 JSX 的工厂函数 */
    "jsxFragmentFactory": "React.Fragment",           /* 指定 JSX 的片段工厂函数 */
    "jsxImportSource": "react",                       /* 指定 JSX 的导入源 */
    "reactNamespace": "React",                        /* 指定 React 的命名空间 */
    "noLib": true,                                    /* 不引入默认的库文件 */
    "useDefineForClassFields": true,                  /* 使用 ECMAScript 中的类字段定义语法 */
    "moduleDetection": "auto",                        /* 模块检测，可选值：auto、legacy、force */

    /* 模块解析选项 */
    "module": "commonjs",                             /*设置TS所使用的模块系统。默认 CommonJS，可选值 CommonJS、ES6ES2020、UMD、AMD、System、ESNext、None*/
    /*如果 target 值为 ES3 ES5 module值为 CommonJS，如果 target 值为ES6 或者更高，module值为ES6*/
    "rootDir": "./",                                  /* 指定项目根目录 */
    "moduleResolution": "node",                       /* 模块解析策略，可选值：node、classic */
    /*module 配置值为 AMD、UMD、System、ES6 时，moduleResolution 默认为 classic，否则为 node。在目前的新代码中，我们一般都是使用 node，而不使用classic。*/
    "baseUrl": "./",                                  /* 指定模块解析的基本目录 */
    /*baseUrl 指的是基准目录，用来设置解析非绝对路径模块名时的基准目录。比如设置 baseUrl 为 './' 时，TypeScript 将会从 tsconfig.json 所在的目录开始查找文件。*/
    "paths": {},                                      /* 指定模块名到基于 baseUrl 的路径映射 */
    /*paths 指的是路径设置，用来将模块路径重新映射到相对于 baseUrl 定位的其他路径配置。这里我们可以将 paths 理解为 webpack 的 alias 别名配置。*/

    "rootDirs": [],                                   /* 指定多个根目录 */
    /*rootDirs 可以指定多个目录作为根目录。这将允许编译器在这些“虚拟”目录中解析相对应的模块导入，就像它们被合并到同一目录中一样。*/
    "typeRoots": [],                                  /* 用来指定类型文件的根目录 */
    /*在默认情况下，所有 node_modules/@types 中的任何包都被认为是可见的。如果手动指定了 typeRoots ，则仅会从指定的目录里查找类型文件。*/
    "types": [],                                      /* 指定需要引入的类型声明文件 */
    /*在默认情况下，所有的 typeRoots 包都将被包含在编译过程中。手动指定 types 时，只有列出的包才会被包含在全局范围内*/
    "allowUmdGlobalAccess": true,                     /* 允许 UMD 模块访问全局变量 */
    "moduleSuffixes": [],                             /* 指定模块后缀名 */
    "allowImportingTsExtensions": true,               /* 允许导入 .ts 文件 */
    "resolvePackageJsonExports": true,                /* 解析 package.json 中的 exports 字段 */
    "resolvePackageJsonImports": true,                /* 解析 package.json 中的 imports 字段 */
    "customConditions": [],                           /* 指定自定义的条件 */
    "resolveJsonModule": true,                        /* 解析 JSON 模块 */
    "allowArbitraryExtensions": true,                 /* 允许导入任意扩展名的文件 */
    "noResolve": true,                                /* 不解析模块 */
    "allowJs": true,                                  /* 允许编译 JavaScript 文件 */
    "checkJs": true,                                  /* 允许检查 JavaScript 文件 */
    "maxNodeModuleJsDepth": 1,                        /* 指定在 node_modules 中查找 JavaScript 文件的深度 */

    /* 源码映射选项 */
    "declaration": true,                              /* 用来表示是否为项目中的 TypeScript 或 JavaScript 文件生成 .d.ts 文件，这些 .d.ts 文件描述了模块导出的 API 类型。 */
    "declarationMap": true,                           /* 生成声明文件映射文件 */
    "emitDeclarationOnly": true,                      /* 只生成声明文件 */
    "sourceMap": true,                                /* s用来表示是否生成sourcemap 文件，这些文件允许调试器和其他工具在使用实际生成的 JavaScript 文件时，显示原始的 TypeScript 代码。 */
    /*Source map 文件以 .js.map （或 .jsx.map）文件的形式被生成到与 .js 文件相对应的同一个目录下。*/

    "inlineSourceMap": true,                          /* 将源码映射文件内联到输出文件中 */
    /*开启 inlineSourceMap 选项时，将不会生成 .js.map 文件，而是将 source map 文件内容生成内联字符串写入对应的 .js 文件中。
虽然这样会生成较大的 JS 文件，但是在不支持 .map 调试的环境下将会很方便。*/
    "outFile": "./",                                  /* 将输出文件合并为一个文件 */
    "outDir": "./",                                   /* 指定输出目录 */
    "removeComments": true,                           /* 删除注释 */
    "noEmit": true,                                   /* 不生成输出文件 */
    "importHelpers": true,                            /* 从 tslib 导入辅助函数 */
    "importsNotUsedAsValues": "remove",               /* 删除未使用的导入 */
    "downlevelIteration": true,                       /* 降级迭代器 */
    "sourceRoot": "",                                 /* 指定源码根目录 */
    /*sourceRoot 用来指定调试器需要定位的 TypeScript 文件位置，而不是相对于源文件的路径。sourceRoot的取值可以是路径或者 URL。*/
    "mapRoot": "",                                    /* 指定源码映射文件的根目录 */
    /*mapRoot 用来指定调试器需要定位的 source map 文件的位置，而不是生成的文件位置。*/
    "inlineSources": true,                            /* 将源码内联到源码映射文件中 */
    /*开启 inlineSources 选项时，将会把源文件的所有内容生成内联字符串并写入 source map 中。这个选项的用途和 inlineSourceMap 是一样的。*/

    "emitBOM": true,                                  /* 在输出文件中添加 BOM */
    "newLine": "lf",                                  /* 指定换行符，可选值：crlf、lf */
    "stripInternal": true,                            /* 删除内部注释 */
    "noEmitHelpers": true,                            /* 不生成辅助函数 */
    "noEmitOnError": true,                            /* 编译错误时不生成输出文件 */
    "preserveConstEnums": true,                       /* 保留 const 枚举 */
    "declarationDir": "./",                           /* 指定声明文件的输出目录 */
    "preserveValueImports": true,                     /* 保留值导入 */
    "isolatedModules": true,                          /* 禁用一些不支持的特性 */
    "verbatimModuleSyntax": true,                     /* 禁用模块解析 */
    "allowSyntheticDefaultImports": true,             /* 允许从没有默认导出的模块中导入 */
    "esModuleInterop": true,                          /* 允许从 CommonJS 模块中导入 */
    /*esModuleInterop 指的是 ES 模块的互操作性。
在默认情况下，TypeScript 像 ES6 模块一样对待 CommonJS / AMD / UMD，但是此时的 TypeScript 代码转移会导致不符合 ES6 模块规范。不过，开启 esModuleInterop 后，这些问题都将得到修复。
一般情况下，在启用 esModuleInterop 时，我们将同时启用 allowSyntheticDefaultImports。*/

    "preserveSymlinks": true,                         /* 保留符号链接 */
    "forceConsistentCasingInFileNames": true,         /* 强制文件名大小写一致 开发人员正在使用和系统不一致的大小写规则，则会抛出错误。*/

    /* 类型检查选项 */
    "strict": true,                                   /* 启用所有严格类型检查选项 */
    "noImplicitAny": true,                            /* 禁止隐式的 any 类型 */
    "strictNullChecks": true,                         /* 启用严格的空值检查 */
    "strictFunctionTypes": true,                      /* 启用严格的函数类型检查 */
    "strictBindCallApply": true,                      /* 启用严格的 bind/call/apply 检查 */
    "strictPropertyInitialization": true,             /* 启用严格的属性初始化检查 */
    "noImplicitThis": true,                           /* 禁止 this 表达式隐式的 any 类型 */
    "useUnknownInCatchVariables": true,               /* 使用 unknown 替代 catch 变量的 any 类型 */
    "alwaysStrict": true,                             /* 在每个源文件中添加 'use strict' */
    "noUnusedLocals": true,                           /* 禁止未使用的局部变量。如果一个本地变量声明未被使用，则会抛出错误。 */
    "noUnusedParameters": true,                       /* 禁止未使用的函数参数。如果函数的参数未被使用，则会抛出错误。 */
    "exactOptionalPropertyTypes": true,               /* 启用精确的可选属性类型检查 */
    "noImplicitReturns": true,                        /* 禁止函数中的隐式返回，如果代码的逻辑分支中有返回，则所有的逻辑分支都应该有返回。 */
    "noFallthroughCasesInSwitch": true,               /* 禁止 switch 语句的落空，如果 switch 语句的流程分支中没有 break 或 return ，则会抛出错误 */
    "noUncheckedIndexedAccess": true,                 /* 禁止未检查的索引访问 */
    "noImplicitOverride": true,                       /* 禁止重写类成员的隐式声明 */
    "noPropertyAccessFromIndexSignature": true,       /* 禁止从索引签名中访问属性 */
    "allowUnusedLabels": true,                        /* 允许未使用的标签 */
    "allowUnreachableCode": true,                     /* 允许不可达代码 */

    /* 附加检查 */
    "skipDefaultLibCheck": true,                      /* 跳过对默认库的类型检查 */
    "skipLibCheck": true,                             /* 跳过对声明文件的类型检查 开启了这个选项，则可以节省编译期的时间，但可能会牺牲类型系统的准确性。在设置该选项时，我推荐值为true*/

    /* 输出格式 */
    "noErrorTruncation": true,                        /* 禁止错误信息截断 */
    "preserveWatchOutput": true,                      /* 保留 watch 输出 */
    "pretty": true                                    /* 使用漂亮的输出 */
  },
  "include": [],
  "exclude": [],
  "files": [],

}
